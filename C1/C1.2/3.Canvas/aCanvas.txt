<canvas>
    - Novo elemento do html5, é uma tela em branco na qual é possível desenhar linhas, textos, imagens e manipulá-las dinamicamente com JS.
    - É similar ao elemento <div>, porem é um conteiner para elementos gráficos em opsição a elementos baseados em texto.
    - Basta definir a tag e especificar o tamanho, podendo inserir uma mensagem dentro da tag que será exibida caso o navegador não suporte canvas.
    - O canvas usa um sistema de coordenadas (x,y) onde (0,0) corresponde ao canto superior esquerdo e (width,heigth) ao canto inferior direito.

<canvas>.getContext("2d")
    - Fornece os métodos e propriedades para desenhar no canvas.

Desenhando linhas no contexto
    - Métodos:
        - beginPath(): Reinicia / inicia um novo caminho de desenho;
        - moveTo(x,y); move o contexto para o ponto definido no método beginPath;
        - lineTo(x,y): define o ponto final de destino para a linha;
        - stroke(): traça a linha, torna a linha visível;
    - Propriedades:
        - lineWidth: largura da linha (5);
        - strokeStyle: cor da linha em rgb, hexadecimais ou nomes (#0f0);
        - lineCap: controla como o final da linha será renderizado (round).

Desenhando curvas no contexto
    - Métodos:
        - arc(): círculo padrão baseado em um ângulo inicial e final e um raio.
        - quadradicCurveTo(): arco permitindo controlar a inclinação da curva que é distribuída uniformimente entre as extremidades.
        - bezierCurveTo(): arco complexo que pode inclinar e recebe três coordenadas.
    - Propriedades:
        - lineWidth, strokeStyle, lineCap, como nas linhas.
    
Desenhando caminhos no contexto
    - É possível juntar todas as chamadas para os vários métodos de desenho (sem executar o beginPath) para criar um traço complexo com diversas formas diferentes, onde todos os desenhos estarão conectados.
    - Desenhar formas personalizadas de qualquer tipo e tamanho usando o método beginPath e encadeando juntos uma série de métodos de desenho.

Desenhando retangulos no contexto
    - rect(X,Y,Width,Height): desenhar um retangulo, do ponto X e Y (canto superior esquerdo) até o tamanha determinado.

Preenchendo desenhos no contexto
    - Cor sólida:
        - fillStyle: define a cor que será preenchida.
        - fill(): preenche o desenho com a cor definida.
        - fillRect(): método específico para retângulos que cria e preenche o retângulo com a cor definida.
    - Gradiente Linha:
        - Usa objeto CanvasGradient
        - createLinearGradient(iX,iY,fX,fY): cria o objeto CanvasGradient com o ponto inicial e final da linha gradiente.
        - addColorStop(ponto na linha,cor): adiciona paradas de cores a linha gradiente.
    - Gradiente Radial:
        - Como o gradiente de linha, porém em forma circular.
        - Define dois círculos (incial e final), os padrões de cores que serão utilizados e então as cores são divididas dentre os dois círculos.
    - Pattern:
        - Preencher objeto com uma imagem;
        - Criar um pattern para a imagem e então atribuí-la ao fillStyle do contexto;

Desenhando texto no contexto
    - strokeText(texto,xInicio,yInicio): desenha o texto informado na posição (X,Y) do contexto partindo do inicio da seq de caracteres.
    - ctxt.font = "24px arial": configurar uma fonte e seu tamanho.
    - ctxt.strokeStyle = "Red": configurar cor da linha da fonte.
    - ctxt.fillStyle = "Red": configurar a cor do corpo da fonte.
    - ctxt.textAlign = "center": diz ao contexto para considerar (X,Y) o ponto central da seq. de caracteres.